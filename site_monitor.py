import asyncio
import aiohttp
import logging
from aiogram.types import FSInputFile
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass
from aiogram import Bot
from time import perf_counter
from database import Database
import config
import matplotlib.pyplot as plt
import csv
logger = logging.getLogger(__name__)


@dataclass
class SiteConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–π—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    url: str
    name: str
    check_interval: int  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    timeout: int = 10
    expected_status: int = 200
    enabled: bool = True
    last_check: Optional[datetime] = None
    last_status: Optional[bool] = None
    notify_on_down: bool = 1
    notify_on_recovery: bool = 1
    last_response_time_ms: Optional[float] = None
    consecutive_failures: int = 0
    notify_on_failure: bool = True

class SiteMonitor:
    def __init__(self, bot:Bot, db:Database) -> None:
        self.bot = bot
        self.db = db
        self.sites: List[SiteConfig] = []
        self.running = False
        self.site_tasks: dict[str, asyncio.Task] = {}
    async def check_site_availability(self, site: SiteConfig) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∞–π—Ç–∞"""
        while self.running and site.enabled:
            timeout = aiohttp.ClientTimeout(total=site.timeout)
            start_time = perf_counter()
            status_ok = False
            response_status = None
            try:
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    async with session.get(site.url) as response:
                        response_status = response.status
            except asyncio.TimeoutError:
                logger.warning(f"{site.name} timeout –ø–æ—Å–ª–µ {site.timeout}s")
            except aiohttp.ClientError as e:
                logger.warning(f"{site.name} –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            except Exception as e:
                logger.error(f"{site.name} –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            finally:
                elapsed_ms = (perf_counter() - start_time) * 1000.0
                site.last_response_time_ms = elapsed_ms
                site.last_check = datetime.now()
                if response_status is not None and response_status == site.expected_status:
                    status_ok = True

                site.last_status = status_ok
                if status_ok:
                    if site.consecutive_failures >= 3:
                        if site.notify_on_recovery:
                            await self.bot.send_message(config.admin_id,f"{site.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—Ç–≤–µ—Ç {response_status}, {elapsed_ms:.0f} ms")
                        logger.info(f"{site.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—Ç–≤–µ—Ç {response_status}, {elapsed_ms:.0f} ms")
                    else:
                        logger.debug(f"{site.name} OK, –æ—Ç–≤–µ—Ç {response_status}, {elapsed_ms:.0f} ms")
                    site.consecutive_failures = 0
                    await self.db.add_check(site.name,response_status,True,elapsed_ms)
                else:
                    site.consecutive_failures += 1
                    

                    status_info = response_status if response_status is not None else '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞'
                    logger.warning(
                        f"{site.name} —Å–±–æ–π #{site.consecutive_failures},  —Å—Ç–∞—Ç—É—Å {status_info}, {elapsed_ms:.0f} ms"
                    )
                    if site.consecutive_failures == 3 and site.notify_on_down:
                        await self.bot.send_message(config.admin_id,f"{site.name} —Å–±–æ–π, —Å—Ç–∞—Ç—É—Å {status_info}, {elapsed_ms:.0f} ms")
                    if status_info == '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞':
                        status_info = None
                    await self.db.add_check(site.name,status_info,False,elapsed_ms)
            await asyncio.sleep(site.check_interval)
    async def load_sites(self) -> List[SiteConfig]:
        sites_db = await self.db.get_sites()
        sites = [SiteConfig(site["url"], site["name"], site["check_interval"], site["timeout"], site["expected_status"], site["enabled"]) for site in sites_db]
        self.sites = sites
        return self.sites
    async def add_site(self, site):
        await self.db.add_site(site)
        self.sites.append(site)
        self._start_site_task(site)
    async def delete_site(self,name):
        deleted = await self.db.delete_site_by_name(name)
        if deleted:
            self.sites = [s for s in self.sites if s.name != name]
            self._stop_site_task(name)
    
                    
    async def update_site(self, site_name:str, updated_site: SiteConfig):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∞–π—Ç –≤ self.sites –∏ –≤ –ë–î
        """
        for i, site in enumerate(self.sites):
            if site.name == updated_site.name:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                self.sites[i] = updated_site

                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞—Å–∫
                self._stop_site_task(site.name)
                if updated_site.enabled:
                    self._start_site_task(updated_site)

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                await self.db.update_site(
                    old_name=site_name,
                    name=updated_site.name,
                    url=updated_site.url,

                    check_interval=updated_site.check_interval,
                    timeout=updated_site.timeout,
                    expected_status=updated_site.expected_status,
                    enabled=int(updated_site.enabled),
                    notify_on_down = int(updated_site.notify_on_down),
                    notify_on_recovery = int(updated_site.notify_on_recovery)
                )
                break
    async def toggle_onoff(self, site_name):
        site = next((s for s in self.sites if s.name == site_name), None)
        if site and site.enabled:
            site.enabled = False
            self._stop_site_task(site_name)
        elif site and not site.enabled:
            site.enabled = True
            self._start_site_task(site)
        return site
        
    async def run_monitoring(self):
        self.running = True
        await self.load_sites()
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞—Å–∫–∏ –¥–ª—è –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
        for site in self.sites:
            if site.enabled:
                self._start_site_task(site)

    def _start_site_task(self, site):
        if site.name in self.site_tasks:
            return
        task = asyncio.create_task(self.check_site_availability(site))
        self.site_tasks[site.name] = task

    def _stop_site_task(self, name):
        task = self.site_tasks.pop(name, None)
        if task:
            task.cancel()
    async def create_report(self, site_name: str, days: int = 7):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ —Å–∞–π—Ç—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.
        """
        site = next((s for s in self.sites if s.name == site_name), None)
        if not site:
            return "‚ùå –°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."

        since = datetime.now() - timedelta(days=days)
        checks = await self.db.get_checks_since(since)
        checks = [c for c in await self.db.get_checks_since(since) if c["site_name"] == site.name]
        if not checks:
            return f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π."

        total = len(checks)
        ok = sum(1 for c in checks if c["is_ok"])
        fail = total - ok
        uptime = (ok / total) * 100 if total else 0
        avg_response = sum(c["response_time_ms"] for c in checks if c["response_time_ms"]) / ok if ok else 0

        report_text = f"üìä –û—Ç—á—ë—Ç –æ —Å–∞–π—Ç–µ <b>{site.name}</b>\n"
        report_text += f"–ü–µ—Ä–∏–æ–¥: {since.strftime('%d.%m.%Y')} ‚Äî {datetime.now().strftime('%d.%m.%Y')}\n\n"
        report_text += f"‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω: {ok} —Ä–∞–∑\n"
        report_text += f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {fail} —Ä–∞–∑\n"
        report_text += f"üìà Uptime: {uptime:.2f}%\n"
        report_text += f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {avg_response:.0f} ms\n"

        return report_text

    async def send_weekly_report(self):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.
        """
        report_text = "üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–∞–π—Ç–æ–≤\n\n"
        for site in self.sites:
            site_report = await self.create_report(site.name, days=7)
            report_text += site_report + "\n\n"

            #await self.bot.send_message(config.admin_id, report_text, parse_mode="HTML")
            file = await self.plot_response_time(name=site.name)
            photo = FSInputFile(file)
            await self.bot.send_photo(chat_id=config.admin_id, photo=photo,caption=report_text)

    async def send_daily_report(self,name):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.
        """
        site = next((s for s in self.sites if s.name == name), None)
        site_report = await self.create_report(site.name, days=1)
        report_text = site_report + "\n\n"
        file = await self.plot_response_time(name=site.name)
        photo = FSInputFile(file)  
        return photo, report_text
       
        #await self.bot.send_message(config.admin_id, report_text, parse_mode="HTML")

    async def weekly_report_task(self):
        """ 
        –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00.
        """
        while True:
            now = datetime.now()
            days_until_monday = (7 - now.weekday()) % 7
            next_monday = now + timedelta(days=days_until_monday)
            next_run = next_monday.replace(hour=10, minute=0, second=0, microsecond=0)
            if next_run <= now:
                next_run += timedelta(days=7)

            await asyncio.sleep((next_run - now).total_seconds())
            try:
                await self.send_weekly_report()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    async def plot_response_time(self, name: str, days: int = 7):
        """
        –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ —Å–∞–π—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.
        """
        since = datetime.now() - timedelta(days=days)
        checks = await self.db.get_checks_since(since)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–∞–π—Ç—É
        site_checks = [c for c in checks if c["site_name"] == name]

        if not site_checks:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return None

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        times = [c["checked_at"] for c in site_checks]
        response_times = [c["response_time_ms"] or 0 for c in site_checks]
        site_name = site_checks[0]["site_name"]

        # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 5))
        plt.plot(times, response_times, marker="o", linestyle="-", label="Response time (ms)")
        plt.title(f"–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —Å–∞–π—Ç–∞ {site_name} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (–º—Å)")
        plt.xticks(rotation=45)
        plt.grid(True)
        plt.legend()

        filename = f"response_time_{name}.png"
        plt.tight_layout()
        plt.savefig(filename)
        plt.close()

        return filename
    async def export_report_csv(self, site_name: str, days: int = 7, file_path: str = None):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–∞–π—Ç—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ CSV.
        """
        site = next((s for s in self.sites if s.name == site_name), None)
        if not site:
            return None

        since = datetime.now() - timedelta(days=days)
        checks = await self.db.get_checks_since(since=since)
        checks = [c for c in checks if c["site_name"] == site_name]
        if not checks:
            return None

        if not file_path:
            file_path = f"{site.name}_{since.strftime('%Y%m%d')}_{datetime.now().strftime('%Y%m%d')}.csv"

        with open(file_path, mode="w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow(["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–°—Ç–∞—Ç—É—Å –∫–æ–¥", "–î–æ—Å—Ç—É–ø–µ–Ω", "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (ms)", "–û—à–∏–±–∫–∞"])
            # –î–∞–Ω–Ω—ã–µ
            for c in checks:
                writer.writerow([
                    c["checked_at"].strftime("%Y-%m-%d %H:%M:%S") if c["checked_at"] else "",
                    c.get("status_code", ""),
                    1 if c.get("is_ok") else 0,
                    c.get("response_time_ms", ""),
                    c.get("error", "")
                ])
        return file_path

